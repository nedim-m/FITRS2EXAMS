// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using exam.Services.Database;

#nullable disable

namespace exam.Services.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20250201202104_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("exam.Services.Database.FITPasos", b =>
                {
                    b.Property<int>("FITPasosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FITPasosId"));

                    b.Property<bool>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DatumVazenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("FITPasosId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("FITPasos");
                });

            modelBuilder.Entity("exam.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisniks");

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Email = "admin@admin.com",
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Admin",
                            Telefon = "061399232",
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikId = 2,
                            Email = "uposlenik@uposlenik.com",
                            Ime = "Uposlenik",
                            KorisnickoIme = "uposlenik",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Uposlenik",
                            Telefon = "061399233",
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikId = 3,
                            Email = "korisnik@korisnik.com",
                            Ime = "Korisnik",
                            KorisnickoIme = "korisnik",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Korisnik",
                            Telefon = "061222333",
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("exam.Services.Database.MoodTracker", b =>
                {
                    b.Property<int>("MoodTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTrackerId"));

                    b.Property<DateTime>("DatumEvidencije")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("OpisRaspolozenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VrijednostRaspolozenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoodTrackerId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("MoodTrackers");
                });

            modelBuilder.Entity("exam.Services.Database.ToDo4924", b =>
                {
                    b.Property<int>("ToDo4924Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToDo4924Id"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("KrajnjiRok")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazivAktivnosti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisAktivnosti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusAktivnosti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToDo4924Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("ToDo4924s");
                });

            modelBuilder.Entity("exam.Services.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Ulogas");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Admin",
                            Opis = "Bog i batina."
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Uposlenik",
                            Opis = "Tu i tamo moze nesto."
                        },
                        new
                        {
                            UlogaId = 3,
                            Naziv = "Korisnik",
                            Opis = "Obicni smrtnik."
                        });
                });

            modelBuilder.Entity("exam.Services.Database.FITPasos", b =>
                {
                    b.HasOne("exam.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("exam.Services.Database.Korisnik", b =>
                {
                    b.HasOne("exam.Services.Database.Uloga", "Uloga")
                        .WithMany("Korisniks")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("exam.Services.Database.MoodTracker", b =>
                {
                    b.HasOne("exam.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("exam.Services.Database.ToDo4924", b =>
                {
                    b.HasOne("exam.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("exam.Services.Database.Uloga", b =>
                {
                    b.Navigation("Korisniks");
                });
#pragma warning restore 612, 618
        }
    }
}
